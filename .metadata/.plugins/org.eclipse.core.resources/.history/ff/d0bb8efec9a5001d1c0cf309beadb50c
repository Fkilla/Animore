package com.zerock.controller;

import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zerock.domain.CartVO;
import com.zerock.domain.MemberVO;
import com.zerock.service.MemberService;
import com.zerock.service.ProductService;

import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;

@Controller
@Log4j
@RequestMapping("/anymoremall/*")
@AllArgsConstructor
public class anymoremallController {
	
	private ProductService service;
	
	//상품 목록 가져오기
	@RequestMapping(value = "/product_list", method = RequestMethod.GET)
	public void list(Model model) {
		log.info("product_list");
		
		model.addAttribute("productlist", service.getList());
	}
	
	//상품 상세보기
	@RequestMapping(value = "/product_detail", method = RequestMethod.GET)
	public void get(@RequestParam("product_num") Long product_num, Model model) {
		log.info("product_detail");
		model.addAttribute("product", service.get(product_num));
	}
	
	//장바구니 페이지 이동
	@RequestMapping(value = "/cart", method = RequestMethod.GET)
	public void go_cart() {
		
	}
	
	//상품 장바구니 담기
	@ResponseBody
	@RequestMapping(value = "/cart", method = RequestMethod.POST)
	public int addCart(CartVO cart, HttpSession session) {
		
		int result = 0;
		
		MemberVO member = (MemberVO)session.getAttribute("member");
		
		if(member != null) {
			cart.setId(member.getId());
			service.addCart(cart);
			result = 1;
		}
		
		return result;
		
	}
	
	@GetMapping("/cart")
	public void cart(Model model, HttpSession session) {
		
		// 로그인 한 사용자의 아이디 변수
		String id = "";
		if(session.getAttribute("member") == null) {
			log.info("로그인 되지 않은 아이디인식");
			return;
		} else {
			MemberVO member = (MemberVO)session.getAttribute("member");
			id = member.getId();
			log.info("로그인 된 아이디 인식 : " + id);
		}
		
		// 장바구니 목록 확인
		List<CartVO> cartInfo = cartService.getList(id);
		log.info("cart info... : " + cartInfo);
		
		// 모델 객체에 장바구니 정보들 배열로 넘기기
		model.addAttribute("cart_list", cartService.getList(id));
	}
	
	@RequestMapping("/cart_delete")
	public String cartDelete(@RequestParam("c_num") Long c_num, RedirectAttributes rttr) {
		log.info("delete..." + c_num);
		cartService.delete(c_num);
		
		return "redirect:/anymoremall/cart";
	}
	
	@RequestMapping("/cart_delete_all")
	public String cartDeleteAll(HttpSession session, RedirectAttributes rttr) {
		String id = "";
		log.info("delete...All!");
		
		MemberVO member = (MemberVO)session.getAttribute("member");
		id = member.getId();
		cartService.deleteAll(id);
		
		return "redirect:/anymoremall/cart";
	}
}
